{
  "timestamp": "2025-10-13T08:30:01.285Z",
  "summary": {
    "totalFrontendCalls": 223,
    "verifiedRoutes": 169,
    "missingRoutes": 51,
    "methodMismatches": 3,
    "autoFixable": 32
  },
  "issues": [
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "hooks/useProjects.ts",
        "line": 44,
        "endpoint": "/api/projects",
        "method": "POST",
        "context": "const response = await apiRequest('/api/projects', {"
      },
      "expectedRoute": "/api/projects",
      "actualRoute": {
        "file": "routes/lifeCEORoutes.ts",
        "path": "/life-ceo/projects",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/life-ceo/projects"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/life-ceo/projects. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "hooks/useProjects.ts",
        "line": 106,
        "endpoint": "/api/projects/bulk-import",
        "method": "POST",
        "context": "const response = await apiRequest('/api/projects/bulk-import', {"
      },
      "expectedRoute": "/api/projects/bulk-import",
      "actualRoute": {
        "file": "routes/lifeCEORoutes.ts",
        "path": "/life-ceo/projects",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/life-ceo/projects"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/life-ceo/projects. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "contexts/auth-context.tsx",
        "line": 82,
        "endpoint": "/api/user/login",
        "method": "GET",
        "context": "const response = await fetch('/api/user/login', {"
      },
      "expectedRoute": "/api/user/login",
      "actualRoute": {
        "file": "rbacRoutes.ts",
        "path": "/user/:userId/roles",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/user/:userId/roles"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/user/:userId/roles. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/TrialBanner.tsx",
        "line": 45,
        "endpoint": "/api/payments/trial-status",
        "method": "GET",
        "context": "const res = await fetch('/api/payments/trial-status', { credentials: 'include' });"
      },
      "expectedRoute": "/api/payments/trial-status",
      "actualRoute": {
        "file": "routes/paymentRoutes.ts",
        "path": "/api/payments/subscription-tiers",
        "method": "GET",
        "mountPath": "",
        "fullPath": "/api/payments/subscription-tiers"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/payments/subscription-tiers. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/SecurityDemo.tsx",
        "line": 159,
        "endpoint": "/api/event/1/feedback",
        "method": "GET",
        "context": "const response = await fetch('/api/event/1/feedback', {"
      },
      "expectedRoute": "/api/event/1/feedback",
      "actualRoute": {
        "file": "routes/postsRoutes.ts",
        "path": "/api/posts/mentions/event/:eventId",
        "method": "GET",
        "mountPath": "",
        "fullPath": "/api/posts/mentions/event/:eventId"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/posts/mentions/event/:eventId. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/SecurityDemo.tsx",
        "line": 195,
        "endpoint": "/api/memory/demo-123/tag",
        "method": "GET",
        "context": "const response = await fetch('/api/memory/demo-123/tag', {"
      },
      "expectedRoute": "/api/memory/demo-123/tag",
      "actualRoute": {
        "file": "routes/memoryRoutes.ts",
        "path": "/memory/:memoryId/tag",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/memory/:memoryId/tag"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/memory/:memoryId/tag. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/GlobalStatisticsDashboard.tsx",
        "line": 67,
        "endpoint": "/api/statistics/global",
        "method": "GET",
        "context": "const response = await fetch('/api/statistics/global', { headers });"
      },
      "expectedRoute": "/api/statistics/global",
      "autoFixable": false,
      "recommendation": "Create backend route: router.get('/api/statistics/global', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/GlobalStatisticsDashboard.tsx",
        "line": 79,
        "endpoint": "/api/statistics/realtime",
        "method": "GET",
        "context": "const response = await fetch('/api/statistics/realtime');"
      },
      "expectedRoute": "/api/statistics/realtime",
      "autoFixable": false,
      "recommendation": "Create backend route: router.get('/api/statistics/realtime', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "pages/admin/sprints.tsx",
        "line": 67,
        "endpoint": "/api/tracker/sprints",
        "method": "POST",
        "context": "apiRequest('/api/tracker/sprints', { method: 'POST', body: data }),"
      },
      "expectedRoute": "/api/tracker/sprints",
      "autoFixable": false,
      "recommendation": "Create backend route: router.post('/api/tracker/sprints', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "pages/admin/projects.tsx",
        "line": 100,
        "endpoint": "/api/tracker/epics",
        "method": "POST",
        "context": "apiRequest('/api/tracker/epics', { method: 'POST', body: data }),"
      },
      "expectedRoute": "/api/tracker/epics",
      "autoFixable": false,
      "recommendation": "Create backend route: router.post('/api/tracker/epics', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "pages/admin/projects.tsx",
        "line": 115,
        "endpoint": "/api/tracker/stories",
        "method": "POST",
        "context": "apiRequest('/api/tracker/stories', { method: 'POST', body: data }),"
      },
      "expectedRoute": "/api/tracker/stories",
      "autoFixable": false,
      "recommendation": "Create backend route: router.post('/api/tracker/stories', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "pages/admin/open-sources.tsx",
        "line": 92,
        "endpoint": "/api/tracker/open-sources/approve-consolidation",
        "method": "POST",
        "context": "return await apiRequest('/api/tracker/open-sources/approve-consolidation', {"
      },
      "expectedRoute": "/api/tracker/open-sources/approve-consolidation",
      "autoFixable": false,
      "recommendation": "Create backend route: router.post('/api/tracker/open-sources/approve-consolidation', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "pages/admin/StoryDetail.tsx",
        "line": 125,
        "endpoint": "/api/tracker/tasks",
        "method": "POST",
        "context": "apiRequest(`/api/tracker/tasks`, {"
      },
      "expectedRoute": "/api/tracker/tasks",
      "autoFixable": false,
      "recommendation": "Create backend route: router.post('/api/tracker/tasks', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/ui/PostActionsMenu.tsx",
        "line": 116,
        "endpoint": "/api/reports",
        "method": "POST",
        "context": "return apiRequest('/api/reports', {"
      },
      "expectedRoute": "/api/reports",
      "actualRoute": {
        "file": "routes/adminRoutes.ts",
        "path": "/admin/reports",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/admin/reports"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/admin/reports. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/ui/PostActionsMenu.tsx",
        "line": 185,
        "endpoint": "/api/saved-posts",
        "method": "POST",
        "context": "await apiRequest('/api/saved-posts', {"
      },
      "expectedRoute": "/api/saved-posts",
      "autoFixable": false,
      "recommendation": "Create backend route: router.post('/api/saved-posts', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/reviews/HostReviewForm.tsx",
        "line": 71,
        "endpoint": "/api/reviews/host",
        "method": "POST",
        "context": "return apiRequest(\"/api/reviews/host\", {"
      },
      "expectedRoute": "/api/reviews/host",
      "autoFixable": false,
      "recommendation": "Create backend route: router.post('/api/reviews/host', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/reviews/GuestReviewForm.tsx",
        "line": 39,
        "endpoint": "/api/reviews/guest",
        "method": "POST",
        "context": "return apiRequest(\"/api/reviews/guest\", {"
      },
      "expectedRoute": "/api/reviews/guest",
      "autoFixable": false,
      "recommendation": "Create backend route: router.post('/api/reviews/guest', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/profile/EnhancedProfileHeader.tsx",
        "line": 101,
        "endpoint": "/api/user/cover-image",
        "method": "POST",
        "context": "return apiRequest('/api/user/cover-image', {"
      },
      "expectedRoute": "/api/user/cover-image",
      "actualRoute": {
        "file": "rbacRoutes.ts",
        "path": "/user/:userId/roles",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/user/:userId/roles"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/user/:userId/roles. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/profile/EnhancedProfileHeader.tsx",
        "line": 127,
        "endpoint": "/api/user/profile-image",
        "method": "POST",
        "context": "return apiRequest('/api/user/profile-image', {"
      },
      "expectedRoute": "/api/user/profile-image",
      "actualRoute": {
        "file": "rbacRoutes.ts",
        "path": "/user/:userId/roles",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/user/:userId/roles"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/user/:userId/roles. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "high",
      "type": "method_mismatch",
      "frontendCall": {
        "file": "components/profile/AddTravelDetailModal.tsx",
        "line": 65,
        "endpoint": "/api/user/travel-details",
        "method": "POST",
        "context": "return apiRequest('/api/user/travel-details', {"
      },
      "actualRoute": {
        "file": "routes/userRoutes.ts",
        "path": "/user/travel-details",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/user/travel-details"
      },
      "autoFixable": true,
      "recommendation": "Update frontend to use GET instead of POST"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/privacy/PrivacyCenter.tsx",
        "line": 82,
        "endpoint": "/api/gdpr/consent/status",
        "method": "GET",
        "context": "const consentResponse = await fetch('/api/gdpr/consent/status', {"
      },
      "expectedRoute": "/api/gdpr/consent/status",
      "autoFixable": false,
      "recommendation": "Create backend route: router.get('/api/gdpr/consent/status', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/privacy/PrivacyCenter.tsx",
        "line": 119,
        "endpoint": "/api/gdpr/consent",
        "method": "GET",
        "context": "await fetch('/api/gdpr/consent', {"
      },
      "expectedRoute": "/api/gdpr/consent",
      "autoFixable": false,
      "recommendation": "Create backend route: router.get('/api/gdpr/consent', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/privacy/PrivacyCenter.tsx",
        "line": 163,
        "endpoint": "/api/gdpr/export-data",
        "method": "GET",
        "context": "const response = await fetch('/api/gdpr/export-data', {"
      },
      "expectedRoute": "/api/gdpr/export-data",
      "autoFixable": false,
      "recommendation": "Create backend route: router.get('/api/gdpr/export-data', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/notifications/NovuNotificationSystem.tsx",
        "line": 214,
        "endpoint": "/api/notifications/trigger",
        "method": "GET",
        "context": "const response = await fetch('/api/notifications/trigger', {"
      },
      "expectedRoute": "/api/notifications/trigger",
      "actualRoute": {
        "file": "routes/toolbarRoutes.ts",
        "path": "/api/notifications/count",
        "method": "GET",
        "mountPath": "",
        "fullPath": "/api/notifications/count"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/notifications/count. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "high",
      "type": "method_mismatch",
      "frontendCall": {
        "file": "components/modern/EnhancedShareModal.tsx",
        "line": 97,
        "endpoint": "/api/posts/share",
        "method": "GET",
        "context": "await fetch('/api/posts/share', {"
      },
      "actualRoute": {
        "file": "routes/postsRoutes.ts",
        "path": "/api/posts/share",
        "method": "POST",
        "mountPath": "",
        "fullPath": "/api/posts/share"
      },
      "autoFixable": true,
      "recommendation": "Update frontend to use POST instead of GET"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/memory/MemoryRoleManager.tsx",
        "line": 52,
        "endpoint": "/api/memory/custom-role-request",
        "method": "GET",
        "context": "const response = await fetch('/api/memory/custom-role-request', {"
      },
      "expectedRoute": "/api/memory/custom-role-request",
      "actualRoute": {
        "file": "routes/memoryRoutes.ts",
        "path": "/memory/:memoryId/tag",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/memory/:memoryId/tag"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/memory/:memoryId/tag. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/memory/MemoryRoleManager.tsx",
        "line": 80,
        "endpoint": "/api/memory/switch-role",
        "method": "GET",
        "context": "const response = await fetch('/api/memory/switch-role', {"
      },
      "expectedRoute": "/api/memory/switch-role",
      "actualRoute": {
        "file": "routes/memoryRoutes.ts",
        "path": "/memory/:memoryId/tag",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/memory/:memoryId/tag"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/memory/:memoryId/tag. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/memories/EnhancedMemoriesRealtime.tsx",
        "line": 93,
        "endpoint": "/api/memories/enhance",
        "method": "GET",
        "context": "const enhanceResponse = await fetch('/api/memories/enhance', {"
      },
      "expectedRoute": "/api/memories/enhance",
      "actualRoute": {
        "file": "routes/testDataRoutes.ts",
        "path": "/api/memories/:id/comments",
        "method": "GET",
        "mountPath": "",
        "fullPath": "/api/memories/:id/comments"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/memories/:id/comments. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/media/MediaTaggingWorkflow.tsx",
        "line": 57,
        "endpoint": "/api/media/tags/popular",
        "method": "GET",
        "context": "const response = await fetch('/api/media/tags/popular');"
      },
      "expectedRoute": "/api/media/tags/popular",
      "autoFixable": false,
      "recommendation": "Create backend route: router.get('/api/media/tags/popular', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/life-ceo/SentryErrorTester.tsx",
        "line": 16,
        "endpoint": "/api/test/sentry-status",
        "method": "GET",
        "context": "const response = await fetch('/api/test/sentry-status');"
      },
      "expectedRoute": "/api/test/sentry-status",
      "actualRoute": {
        "file": "routes-hubspot.ts",
        "path": "/api/hubspot/test",
        "method": "GET",
        "mountPath": "",
        "fullPath": "/api/hubspot/test"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/hubspot/test. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/life-ceo/SentryErrorTester.tsx",
        "line": 57,
        "endpoint": "/api/test/error",
        "method": "GET",
        "context": "const response = await fetch('/api/test/error');"
      },
      "expectedRoute": "/api/test/error",
      "actualRoute": {
        "file": "routes-hubspot.ts",
        "path": "/api/hubspot/test",
        "method": "GET",
        "mountPath": "",
        "fullPath": "/api/hubspot/test"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/hubspot/test. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/life-ceo/PreDevelopmentChecklist.tsx",
        "line": 61,
        "endpoint": "/api/life-ceo/pre-development-checklist",
        "method": "GET",
        "context": "const response = await fetch('/api/life-ceo/pre-development-checklist', {"
      },
      "expectedRoute": "/api/life-ceo/pre-development-checklist",
      "actualRoute": {
        "file": "routes/lifeCeoAgentRoutes.ts",
        "path": "/agents",
        "method": "GET",
        "mountPath": "/api/life-ceo",
        "fullPath": "/api/life-ceo/agents"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/life-ceo/agents. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/life-ceo/PreDevelopmentChecklist.tsx",
        "line": 76,
        "endpoint": "/api/life-ceo/auto-fix",
        "method": "GET",
        "context": "await fetch('/api/life-ceo/auto-fix', {"
      },
      "expectedRoute": "/api/life-ceo/auto-fix",
      "actualRoute": {
        "file": "routes/lifeCeoAgentRoutes.ts",
        "path": "/agents",
        "method": "GET",
        "mountPath": "/api/life-ceo",
        "fullPath": "/api/life-ceo/agents"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/life-ceo/agents. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/life-ceo/Phase4ToolsDashboard.tsx",
        "line": 39,
        "endpoint": "/api/life-ceo/run-load-test",
        "method": "POST",
        "context": "return apiRequest(`/api/life-ceo/run-load-test`, {"
      },
      "expectedRoute": "/api/life-ceo/run-load-test",
      "actualRoute": {
        "file": "routes/lifeCeoAgentRoutes.ts",
        "path": "/agents",
        "method": "GET",
        "mountPath": "/api/life-ceo",
        "fullPath": "/api/life-ceo/agents"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/life-ceo/agents. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/life-ceo/LifeCEOFrameworkAgent.tsx",
        "line": 422,
        "endpoint": "/api/life-ceo/framework-agent/conversation",
        "method": "POST",
        "context": "await apiRequest('/api/life-ceo/framework-agent/conversation', 'POST', {"
      },
      "expectedRoute": "/api/life-ceo/framework-agent/conversation",
      "actualRoute": {
        "file": "routes/lifeCeoAgentRoutes.ts",
        "path": "/agents",
        "method": "GET",
        "mountPath": "/api/life-ceo",
        "fullPath": "/api/life-ceo/agents"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/life-ceo/agents. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/life-ceo/LifeCEOContinuousLearnings.tsx",
        "line": 64,
        "endpoint": "/api/life-ceo/jira-export",
        "method": "GET",
        "context": "const response = await fetch('/api/life-ceo/jira-export', {"
      },
      "expectedRoute": "/api/life-ceo/jira-export",
      "actualRoute": {
        "file": "routes/lifeCeoAgentRoutes.ts",
        "path": "/agents",
        "method": "GET",
        "mountPath": "/api/life-ceo",
        "fullPath": "/api/life-ceo/agents"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/life-ceo/agents. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/life-ceo/LifeCEOContinuousLearnings.tsx",
        "line": 98,
        "endpoint": "/api/life-ceo/capture-learnings",
        "method": "GET",
        "context": "await fetch('/api/life-ceo/capture-learnings', {"
      },
      "expectedRoute": "/api/life-ceo/capture-learnings",
      "actualRoute": {
        "file": "routes/lifeCeoAgentRoutes.ts",
        "path": "/agents",
        "method": "GET",
        "mountPath": "/api/life-ceo",
        "fullPath": "/api/life-ceo/agents"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/life-ceo/agents. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/friendship/DanceHistoryForm.tsx",
        "line": 60,
        "endpoint": "/api/friendship/dance-history",
        "method": "GET",
        "context": "const response = await fetch('/api/friendship/dance-history', {"
      },
      "expectedRoute": "/api/friendship/dance-history",
      "actualRoute": {
        "file": "routes/friendsRoutes.ts",
        "path": "/friendship/:friendId",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/friendship/:friendId"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/friendship/:friendId. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/friendship/DanceHistoryForm.tsx",
        "line": 106,
        "endpoint": "/api/upload/dance-photos",
        "method": "GET",
        "context": "const response = await fetch('/api/upload/dance-photos', {"
      },
      "expectedRoute": "/api/upload/dance-photos",
      "actualRoute": {
        "file": "routes/uploadRoutes.ts",
        "path": "/api/upload/health",
        "method": "GET",
        "mountPath": "",
        "fullPath": "/api/upload/health"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/upload/health. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/feed/PostLikeComment.tsx",
        "line": 99,
        "endpoint": "/api/post/share",
        "method": "GET",
        "context": "return fetch(\"/api/post/share\", {"
      },
      "expectedRoute": "/api/post/share",
      "actualRoute": {
        "file": "routes/postsRoutes.ts",
        "path": "/api/posts/share",
        "method": "POST",
        "mountPath": "",
        "fullPath": "/api/posts/share"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/posts/share. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "high",
      "type": "method_mismatch",
      "frontendCall": {
        "file": "components/events/EventInvitationManager.tsx",
        "line": 19,
        "endpoint": "/api/users/me/event-invitations",
        "method": "POST",
        "context": "queryFn: () => apiRequest('/api/users/me/event-invitations'),"
      },
      "actualRoute": {
        "file": "routes/eventsRoutes.ts",
        "path": "/api/users/me/event-invitations",
        "method": "GET",
        "mountPath": "",
        "fullPath": "/api/users/me/event-invitations"
      },
      "autoFixable": true,
      "recommendation": "Update frontend to use GET instead of POST"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/admin/ValidationDashboard.tsx",
        "line": 46,
        "endpoint": "/api/validation/run",
        "method": "GET",
        "context": "const response = await fetch('/api/validation/run', {"
      },
      "expectedRoute": "/api/validation/run",
      "autoFixable": false,
      "recommendation": "Create backend route: router.get('/api/validation/run', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/admin/ValidationDashboard.tsx",
        "line": 64,
        "endpoint": "/api/validation/jira-update",
        "method": "GET",
        "context": "const response = await fetch('/api/validation/jira-update', {"
      },
      "expectedRoute": "/api/validation/jira-update",
      "autoFixable": false,
      "recommendation": "Create backend route: router.get('/api/validation/jira-update', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/admin/TestSpriteIntegration.tsx",
        "line": 104,
        "endpoint": "/api/testsprite/trigger",
        "method": "POST",
        "context": "return apiRequest('/api/testsprite/trigger', {"
      },
      "expectedRoute": "/api/testsprite/trigger",
      "autoFixable": false,
      "recommendation": "Create backend route: router.post('/api/testsprite/trigger', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/admin/LifeCEOLearnings.tsx",
        "line": 39,
        "endpoint": "/api/life-ceo/learnings",
        "method": "GET",
        "context": "const response = await fetch('/api/life-ceo/learnings');"
      },
      "expectedRoute": "/api/life-ceo/learnings",
      "actualRoute": {
        "file": "routes/lifeCeoAgentRoutes.ts",
        "path": "/agents",
        "method": "GET",
        "mountPath": "/api/life-ceo",
        "fullPath": "/api/life-ceo/agents"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/life-ceo/agents. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/_archive/ModernPostCreator.tsx",
        "line": 63,
        "endpoint": "/api/users/search",
        "method": "GET",
        "context": "const response = await fetch('/api/users/search');"
      },
      "expectedRoute": "/api/users/search",
      "actualRoute": {
        "file": "routes/userRoutes.ts",
        "path": "/users/:userId",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/users/:userId"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/users/:userId. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/GuestOnboarding/GuestOnboardingFlow.tsx",
        "line": 131,
        "endpoint": "/api/guest-profile",
        "method": "POST",
        "context": "const response = await apiRequest('/api/guest-profile', {"
      },
      "expectedRoute": "/api/guest-profile",
      "actualRoute": {
        "file": "routes/profileRoutes.ts",
        "path": "/guest-profiles",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/guest-profiles"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/guest-profiles. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "lib/mrBlue/subscriptions/SubscriptionManager.tsx",
        "line": 104,
        "endpoint": "/api/subscriptions/create-checkout",
        "method": "POST",
        "context": "return await apiRequest(`/api/subscriptions/create-checkout`, {"
      },
      "expectedRoute": "/api/subscriptions/create-checkout",
      "autoFixable": false,
      "recommendation": "Create backend route: router.post('/api/subscriptions/create-checkout', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "lib/mrBlue/siteBuilder/AISiteBuilderEnhanced.tsx",
        "line": 97,
        "endpoint": "/api/site-builder/generate",
        "method": "GET",
        "context": "const response = await fetch('/api/site-builder/generate', {"
      },
      "expectedRoute": "/api/site-builder/generate",
      "autoFixable": false,
      "recommendation": "Create backend route: router.get('/api/site-builder/generate', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "lib/mrBlue/siteBuilder/AISiteBuilder.tsx",
        "line": 40,
        "endpoint": "/api/site-builder/generate",
        "method": "POST",
        "context": "return await apiRequest('/api/site-builder/generate', {"
      },
      "expectedRoute": "/api/site-builder/generate",
      "autoFixable": false,
      "recommendation": "Create backend route: router.post('/api/site-builder/generate', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "lib/mrBlue/qualityValidator/QualityValidator.tsx",
        "line": 79,
        "endpoint": "/api/quality-validator/collaborate",
        "method": "POST",
        "context": "await apiRequest('/api/quality-validator/collaborate', {"
      },
      "expectedRoute": "/api/quality-validator/collaborate",
      "autoFixable": false,
      "recommendation": "Create backend route: router.post('/api/quality-validator/collaborate', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "lib/mrBlue/learningCoordinator/LearningCoordinator.tsx",
        "line": 68,
        "endpoint": "/api/learning-coordinator/capture",
        "method": "POST",
        "context": "await apiRequest('/api/learning-coordinator/capture', {"
      },
      "expectedRoute": "/api/learning-coordinator/capture",
      "autoFixable": false,
      "recommendation": "Create backend route: router.post('/api/learning-coordinator/capture', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/profile/security/ProfileSecurityLayer.tsx",
        "line": 42,
        "endpoint": "/api/security/csp-report",
        "method": "GET",
        "context": "fetch('/api/security/csp-report', {"
      },
      "expectedRoute": "/api/security/csp-report",
      "actualRoute": {
        "file": "routes/securityRoutes.ts",
        "path": "/security/csrf-token",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/security/csrf-token"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/security/csrf-token. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/profile/documentation/ProfileDocumentation.tsx",
        "line": 126,
        "endpoint": "/api/profile/123",
        "method": "GET",
        "context": "const response = await fetch('/api/profile/123', {"
      },
      "expectedRoute": "/api/profile/123",
      "actualRoute": {
        "file": "routes/userRoutes.ts",
        "path": "/user/profile",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/user/profile"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/user/profile. Update mount path in routes.ts or fix frontend call."
    }
  ],
  "healthScore": 76
}