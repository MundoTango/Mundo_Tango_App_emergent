{
  "timestamp": "2025-10-13T08:14:55.780Z",
  "summary": {
    "totalFrontendCalls": 223,
    "verifiedRoutes": 148,
    "missingRoutes": 68,
    "methodMismatches": 7,
    "autoFixable": 52
  },
  "issues": [
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "pages/AdminCenter.tsx",
        "line": 329,
        "endpoint": "/api/rbac/analytics",
        "method": "GET",
        "context": "const response = await fetch('/api/rbac/analytics', {"
      },
      "expectedRoute": "/api/rbac/analytics",
      "autoFixable": false,
      "recommendation": "Create backend route: router.get('/api/rbac/analytics', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "pages/AdminCenter.tsx",
        "line": 345,
        "endpoint": "/api/rbac/check-permission",
        "method": "GET",
        "context": "const response = await fetch('/api/rbac/check-permission', {"
      },
      "expectedRoute": "/api/rbac/check-permission",
      "autoFixable": false,
      "recommendation": "Create backend route: router.get('/api/rbac/check-permission', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "pages/AdminCenter.tsx",
        "line": 364,
        "endpoint": "/api/rbac/auto-assign",
        "method": "GET",
        "context": "await fetch('/api/rbac/auto-assign', {"
      },
      "expectedRoute": "/api/rbac/auto-assign",
      "autoFixable": false,
      "recommendation": "Create backend route: router.get('/api/rbac/auto-assign', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "pages/AdminCenter.tsx",
        "line": 376,
        "endpoint": "/api/rbac/compliance-audit",
        "method": "GET",
        "context": "const response = await fetch('/api/rbac/compliance-audit', {"
      },
      "expectedRoute": "/api/rbac/compliance-audit",
      "autoFixable": false,
      "recommendation": "Create backend route: router.get('/api/rbac/compliance-audit', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "lib/performance-optimizations.ts",
        "line": 63,
        "endpoint": "/api/notifications/batch",
        "method": "GET",
        "context": "const response = await fetch('/api/notifications/batch', {"
      },
      "expectedRoute": "/api/notifications/batch",
      "actualRoute": {
        "file": "routes/toolbarRoutes.ts",
        "path": "/api/notifications/count",
        "method": "GET",
        "mountPath": "",
        "fullPath": "/api/notifications/count"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/notifications/count. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "lib/life-ceo-performance.ts",
        "line": 208,
        "endpoint": "/api/performance/metrics",
        "method": "GET",
        "context": "await fetch('/api/performance/metrics', {"
      },
      "expectedRoute": "/api/performance/metrics",
      "autoFixable": false,
      "recommendation": "Create backend route: router.get('/api/performance/metrics', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "lib/life-ceo-performance.ts",
        "line": 314,
        "endpoint": "/api/performance/report",
        "method": "GET",
        "context": "const response = await fetch('/api/performance/report', {"
      },
      "expectedRoute": "/api/performance/report",
      "autoFixable": false,
      "recommendation": "Create backend route: router.get('/api/performance/report', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "i18n/config.ts",
        "line": 520,
        "endpoint": "/api/location/detect",
        "method": "GET",
        "context": "const response = await fetch('/api/location/detect');"
      },
      "expectedRoute": "/api/location/detect",
      "autoFixable": false,
      "recommendation": "Create backend route: router.get('/api/location/detect', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "i18n/config.ts",
        "line": 580,
        "endpoint": "/api/translations/submit",
        "method": "GET",
        "context": "const response = await fetch('/api/translations/submit', {"
      },
      "expectedRoute": "/api/translations/submit",
      "actualRoute": {
        "file": "routes/translationRoutes.ts",
        "path": "/languages",
        "method": "GET",
        "mountPath": "/api/translations",
        "fullPath": "/api/translations/languages"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/translations/languages. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "i18n/config.ts",
        "line": 604,
        "endpoint": "/api/translations/vote",
        "method": "GET",
        "context": "const response = await fetch('/api/translations/vote', {"
      },
      "expectedRoute": "/api/translations/vote",
      "actualRoute": {
        "file": "routes/translationRoutes.ts",
        "path": "/languages",
        "method": "GET",
        "mountPath": "/api/translations",
        "fullPath": "/api/translations/languages"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/translations/languages. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "hooks/useProjects.ts",
        "line": 44,
        "endpoint": "/api/projects",
        "method": "POST",
        "context": "const response = await apiRequest('/api/projects', {"
      },
      "expectedRoute": "/api/projects",
      "actualRoute": {
        "file": "routes/projects.ts",
        "path": "/projects",
        "method": "GET",
        "mountPath": "",
        "fullPath": "/projects"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /projects. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "hooks/useProjects.ts",
        "line": 106,
        "endpoint": "/api/projects/bulk-import",
        "method": "POST",
        "context": "const response = await apiRequest('/api/projects/bulk-import', {"
      },
      "expectedRoute": "/api/projects/bulk-import",
      "actualRoute": {
        "file": "routes/projects.ts",
        "path": "/projects/bulk-import",
        "method": "POST",
        "mountPath": "",
        "fullPath": "/projects/bulk-import"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /projects/bulk-import. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "hooks/usePerformanceOptimization.ts",
        "line": 108,
        "endpoint": "/api/performance/metrics",
        "method": "GET",
        "context": "fetch('/api/performance/metrics', {"
      },
      "expectedRoute": "/api/performance/metrics",
      "autoFixable": false,
      "recommendation": "Create backend route: router.get('/api/performance/metrics', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "hooks/useFriendRequest.ts",
        "line": 65,
        "endpoint": "/api/friends/request",
        "method": "POST",
        "context": "return apiRequest('/api/friends/request', {"
      },
      "expectedRoute": "/api/friends/request",
      "actualRoute": {
        "file": "routes/friendsRoutes.ts",
        "path": "/friendship/:friendId",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/friendship/:friendId"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/friendship/:friendId. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "high",
      "type": "method_mismatch",
      "frontendCall": {
        "file": "contexts/auth-context.tsx",
        "line": 57,
        "endpoint": "/api/user/profile",
        "method": "GET",
        "context": "const response = await fetch('/api/user/profile', {"
      },
      "actualRoute": {
        "file": "routes/userRoutes.ts",
        "path": "/user/profile",
        "method": "PUT",
        "mountPath": "/api",
        "fullPath": "/api/user/profile"
      },
      "autoFixable": true,
      "recommendation": "Update frontend to use PUT instead of GET"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "contexts/auth-context.tsx",
        "line": 82,
        "endpoint": "/api/user/login",
        "method": "GET",
        "context": "const response = await fetch('/api/user/login', {"
      },
      "expectedRoute": "/api/user/login",
      "actualRoute": {
        "file": "routes/userStatsRoutes.ts",
        "path": "/user/stats",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/user/stats"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/user/stats. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "contexts/TenantContext.tsx",
        "line": 72,
        "endpoint": "/api/tenants/user",
        "method": "GET",
        "context": "const response = await fetch('/api/tenants/user', {"
      },
      "expectedRoute": "/api/tenants/user",
      "actualRoute": {
        "file": "routes/tenantRoutes.ts",
        "path": "/tenants/user",
        "method": "GET",
        "mountPath": "",
        "fullPath": "/tenants/user"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /tenants/user. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "contexts/TenantContext.tsx",
        "line": 118,
        "endpoint": "/api/tenants/view-preferences",
        "method": "GET",
        "context": "const response = await fetch('/api/tenants/view-preferences', {"
      },
      "expectedRoute": "/api/tenants/view-preferences",
      "actualRoute": {
        "file": "routes/tenantRoutes.ts",
        "path": "/tenants/view-preferences",
        "method": "GET",
        "mountPath": "",
        "fullPath": "/tenants/view-preferences"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /tenants/view-preferences. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/TrialBanner.tsx",
        "line": 45,
        "endpoint": "/api/payments/trial-status",
        "method": "GET",
        "context": "const res = await fetch('/api/payments/trial-status', { credentials: 'include' });"
      },
      "expectedRoute": "/api/payments/trial-status",
      "actualRoute": {
        "file": "routes/paymentRoutes.ts",
        "path": "/api/payments/subscription-tiers",
        "method": "GET",
        "mountPath": "",
        "fullPath": "/api/payments/subscription-tiers"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/payments/subscription-tiers. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/SecurityDemo.tsx",
        "line": 127,
        "endpoint": "/api/friend-request",
        "method": "GET",
        "context": "const response = await fetch('/api/friend-request', {"
      },
      "expectedRoute": "/api/friend-request",
      "autoFixable": false,
      "recommendation": "Create backend route: router.get('/api/friend-request', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/SecurityDemo.tsx",
        "line": 159,
        "endpoint": "/api/event/1/feedback",
        "method": "GET",
        "context": "const response = await fetch('/api/event/1/feedback', {"
      },
      "expectedRoute": "/api/event/1/feedback",
      "actualRoute": {
        "file": "routes/postsRoutes.ts",
        "path": "/api/posts/mentions/event/:eventId",
        "method": "GET",
        "mountPath": "",
        "fullPath": "/api/posts/mentions/event/:eventId"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/posts/mentions/event/:eventId. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/SecurityDemo.tsx",
        "line": 195,
        "endpoint": "/api/memory/demo-123/tag",
        "method": "GET",
        "context": "const response = await fetch('/api/memory/demo-123/tag', {"
      },
      "expectedRoute": "/api/memory/demo-123/tag",
      "autoFixable": false,
      "recommendation": "Create backend route: router.get('/api/memory/demo-123/tag', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/RoleManagement.tsx",
        "line": 62,
        "endpoint": "/api/roles/me",
        "method": "GET",
        "context": "const response = await fetch('/api/roles/me', {"
      },
      "expectedRoute": "/api/roles/me",
      "actualRoute": {
        "file": "routes/miscRoutes.ts",
        "path": "/roles/community",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/roles/community"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/roles/community. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/RoleManagement.tsx",
        "line": 78,
        "endpoint": "/api/roles/users",
        "method": "GET",
        "context": "const response = await fetch('/api/roles/users', {"
      },
      "expectedRoute": "/api/roles/users",
      "actualRoute": {
        "file": "routes/miscRoutes.ts",
        "path": "/roles/community",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/roles/community"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/roles/community. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/RoleManagement.tsx",
        "line": 102,
        "endpoint": "/api/roles/update",
        "method": "GET",
        "context": "const response = await fetch('/api/roles/update', {"
      },
      "expectedRoute": "/api/roles/update",
      "actualRoute": {
        "file": "routes/miscRoutes.ts",
        "path": "/roles/community",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/roles/community"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/roles/community. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/RoleGuard.tsx",
        "line": 41,
        "endpoint": "/api/roles/enhanced/me",
        "method": "GET",
        "context": "const response = await fetch('/api/roles/enhanced/me', {"
      },
      "expectedRoute": "/api/roles/enhanced/me",
      "actualRoute": {
        "file": "routes/miscRoutes.ts",
        "path": "/roles/community",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/roles/community"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/roles/community. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/GlobalStatisticsDashboard.tsx",
        "line": 67,
        "endpoint": "/api/statistics/global",
        "method": "GET",
        "context": "const response = await fetch('/api/statistics/global', { headers });"
      },
      "expectedRoute": "/api/statistics/global",
      "autoFixable": false,
      "recommendation": "Create backend route: router.get('/api/statistics/global', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/GlobalStatisticsDashboard.tsx",
        "line": 79,
        "endpoint": "/api/statistics/realtime",
        "method": "GET",
        "context": "const response = await fetch('/api/statistics/realtime');"
      },
      "expectedRoute": "/api/statistics/realtime",
      "autoFixable": false,
      "recommendation": "Create backend route: router.get('/api/statistics/realtime', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/FriendRequestList.tsx",
        "line": 52,
        "endpoint": "/api/friend-requests/received",
        "method": "POST",
        "context": "const response = await apiRequest('/api/friend-requests/received');"
      },
      "expectedRoute": "/api/friend-requests/received",
      "autoFixable": false,
      "recommendation": "Create backend route: router.post('/api/friend-requests/received', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/FriendRequestForm.tsx",
        "line": 54,
        "endpoint": "/api/friend-requests/send",
        "method": "POST",
        "context": "apiRequest('/api/friend-requests/send', {"
      },
      "expectedRoute": "/api/friend-requests/send",
      "autoFixable": false,
      "recommendation": "Create backend route: router.post('/api/friend-requests/send', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/EnhancedRoleManager.tsx",
        "line": 123,
        "endpoint": "/api/roles/enhanced/me",
        "method": "GET",
        "context": "const response = await fetch('/api/roles/enhanced/me', {"
      },
      "expectedRoute": "/api/roles/enhanced/me",
      "actualRoute": {
        "file": "routes/miscRoutes.ts",
        "path": "/roles/community",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/roles/community"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/roles/community. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/EnhancedRoleManager.tsx",
        "line": 138,
        "endpoint": "/api/roles/enhanced/all",
        "method": "GET",
        "context": "const response = await fetch('/api/roles/enhanced/all', {"
      },
      "expectedRoute": "/api/roles/enhanced/all",
      "actualRoute": {
        "file": "routes/miscRoutes.ts",
        "path": "/roles/community",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/roles/community"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/roles/community. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/EnhancedRoleManager.tsx",
        "line": 153,
        "endpoint": "/api/roles/users",
        "method": "GET",
        "context": "const response = await fetch('/api/roles/users', {"
      },
      "expectedRoute": "/api/roles/users",
      "actualRoute": {
        "file": "routes/miscRoutes.ts",
        "path": "/roles/community",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/roles/community"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/roles/community. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/EnhancedRoleManager.tsx",
        "line": 174,
        "endpoint": "/api/roles/enhanced/assign",
        "method": "GET",
        "context": "const response = await fetch('/api/roles/enhanced/assign', {"
      },
      "expectedRoute": "/api/roles/enhanced/assign",
      "actualRoute": {
        "file": "routes/miscRoutes.ts",
        "path": "/roles/community",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/roles/community"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/roles/community. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/EnhancedRoleManager.tsx",
        "line": 204,
        "endpoint": "/api/roles/enhanced/remove",
        "method": "GET",
        "context": "const response = await fetch('/api/roles/enhanced/remove', {"
      },
      "expectedRoute": "/api/roles/enhanced/remove",
      "actualRoute": {
        "file": "routes/miscRoutes.ts",
        "path": "/roles/community",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/roles/community"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/roles/community. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/EnhancedRoleManager.tsx",
        "line": 234,
        "endpoint": "/api/roles/enhanced/primary",
        "method": "GET",
        "context": "const response = await fetch('/api/roles/enhanced/primary', {"
      },
      "expectedRoute": "/api/roles/enhanced/primary",
      "actualRoute": {
        "file": "routes/miscRoutes.ts",
        "path": "/roles/community",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/roles/community"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/roles/community. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "pages/admin/sprints.tsx",
        "line": 67,
        "endpoint": "/api/tracker/sprints",
        "method": "POST",
        "context": "apiRequest('/api/tracker/sprints', { method: 'POST', body: data }),"
      },
      "expectedRoute": "/api/tracker/sprints",
      "actualRoute": {
        "file": "routes/projectTracker.ts",
        "path": "/tracker/sprints",
        "method": "GET",
        "mountPath": "",
        "fullPath": "/tracker/sprints"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /tracker/sprints. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "pages/admin/projects.tsx",
        "line": 100,
        "endpoint": "/api/tracker/epics",
        "method": "POST",
        "context": "apiRequest('/api/tracker/epics', { method: 'POST', body: data }),"
      },
      "expectedRoute": "/api/tracker/epics",
      "actualRoute": {
        "file": "routes/projectTracker.ts",
        "path": "/tracker/epics",
        "method": "GET",
        "mountPath": "",
        "fullPath": "/tracker/epics"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /tracker/epics. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "pages/admin/projects.tsx",
        "line": 115,
        "endpoint": "/api/tracker/stories",
        "method": "POST",
        "context": "apiRequest('/api/tracker/stories', { method: 'POST', body: data }),"
      },
      "expectedRoute": "/api/tracker/stories",
      "actualRoute": {
        "file": "routes/projectTracker.ts",
        "path": "/tracker/stories",
        "method": "GET",
        "mountPath": "",
        "fullPath": "/tracker/stories"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /tracker/stories. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "pages/admin/open-sources.tsx",
        "line": 92,
        "endpoint": "/api/tracker/open-sources/approve-consolidation",
        "method": "POST",
        "context": "return await apiRequest('/api/tracker/open-sources/approve-consolidation', {"
      },
      "expectedRoute": "/api/tracker/open-sources/approve-consolidation",
      "actualRoute": {
        "file": "routes/projectTracker.ts",
        "path": "/tracker/open-sources/approve-consolidation",
        "method": "POST",
        "mountPath": "",
        "fullPath": "/tracker/open-sources/approve-consolidation"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /tracker/open-sources/approve-consolidation. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "pages/admin/StoryDetail.tsx",
        "line": 125,
        "endpoint": "/api/tracker/tasks",
        "method": "POST",
        "context": "apiRequest(`/api/tracker/tasks`, {"
      },
      "expectedRoute": "/api/tracker/tasks",
      "actualRoute": {
        "file": "routes/projectTracker.ts",
        "path": "/tracker/tasks",
        "method": "POST",
        "mountPath": "",
        "fullPath": "/tracker/tasks"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /tracker/tasks. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/ui/PostActionsMenu.tsx",
        "line": 116,
        "endpoint": "/api/reports",
        "method": "POST",
        "context": "return apiRequest('/api/reports', {"
      },
      "expectedRoute": "/api/reports",
      "actualRoute": {
        "file": "routes/adminRoutes.ts",
        "path": "/admin/reports",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/admin/reports"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/admin/reports. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/ui/PostActionsMenu.tsx",
        "line": 185,
        "endpoint": "/api/saved-posts",
        "method": "POST",
        "context": "await apiRequest('/api/saved-posts', {"
      },
      "expectedRoute": "/api/saved-posts",
      "autoFixable": false,
      "recommendation": "Create backend route: router.post('/api/saved-posts', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/reviews/HostReviewForm.tsx",
        "line": 71,
        "endpoint": "/api/reviews/host",
        "method": "POST",
        "context": "return apiRequest(\"/api/reviews/host\", {"
      },
      "expectedRoute": "/api/reviews/host",
      "autoFixable": false,
      "recommendation": "Create backend route: router.post('/api/reviews/host', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/reviews/GuestReviewForm.tsx",
        "line": 39,
        "endpoint": "/api/reviews/guest",
        "method": "POST",
        "context": "return apiRequest(\"/api/reviews/guest\", {"
      },
      "expectedRoute": "/api/reviews/guest",
      "autoFixable": false,
      "recommendation": "Create backend route: router.post('/api/reviews/guest', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/profile/EnhancedProfileHeader.tsx",
        "line": 101,
        "endpoint": "/api/user/cover-image",
        "method": "POST",
        "context": "return apiRequest('/api/user/cover-image', {"
      },
      "expectedRoute": "/api/user/cover-image",
      "actualRoute": {
        "file": "routes/userStatsRoutes.ts",
        "path": "/user/stats",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/user/stats"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/user/stats. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/profile/EnhancedProfileHeader.tsx",
        "line": 127,
        "endpoint": "/api/user/profile-image",
        "method": "POST",
        "context": "return apiRequest('/api/user/profile-image', {"
      },
      "expectedRoute": "/api/user/profile-image",
      "actualRoute": {
        "file": "routes/userStatsRoutes.ts",
        "path": "/user/stats",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/user/stats"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/user/stats. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "high",
      "type": "method_mismatch",
      "frontendCall": {
        "file": "components/profile/AddTravelDetailModal.tsx",
        "line": 65,
        "endpoint": "/api/user/travel-details",
        "method": "POST",
        "context": "return apiRequest('/api/user/travel-details', {"
      },
      "actualRoute": {
        "file": "routes/userRoutes.ts",
        "path": "/user/travel-details",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/user/travel-details"
      },
      "autoFixable": true,
      "recommendation": "Update frontend to use GET instead of POST"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/privacy/PrivacyCenter.tsx",
        "line": 82,
        "endpoint": "/api/gdpr/consent/status",
        "method": "GET",
        "context": "const consentResponse = await fetch('/api/gdpr/consent/status', {"
      },
      "expectedRoute": "/api/gdpr/consent/status",
      "autoFixable": false,
      "recommendation": "Create backend route: router.get('/api/gdpr/consent/status', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/privacy/PrivacyCenter.tsx",
        "line": 119,
        "endpoint": "/api/gdpr/consent",
        "method": "GET",
        "context": "await fetch('/api/gdpr/consent', {"
      },
      "expectedRoute": "/api/gdpr/consent",
      "autoFixable": false,
      "recommendation": "Create backend route: router.get('/api/gdpr/consent', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/privacy/PrivacyCenter.tsx",
        "line": 163,
        "endpoint": "/api/gdpr/export-data",
        "method": "GET",
        "context": "const response = await fetch('/api/gdpr/export-data', {"
      },
      "expectedRoute": "/api/gdpr/export-data",
      "autoFixable": false,
      "recommendation": "Create backend route: router.get('/api/gdpr/export-data', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/notifications/NovuNotificationSystem.tsx",
        "line": 214,
        "endpoint": "/api/notifications/trigger",
        "method": "GET",
        "context": "const response = await fetch('/api/notifications/trigger', {"
      },
      "expectedRoute": "/api/notifications/trigger",
      "actualRoute": {
        "file": "routes/toolbarRoutes.ts",
        "path": "/api/notifications/count",
        "method": "GET",
        "mountPath": "",
        "fullPath": "/api/notifications/count"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/notifications/count. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "high",
      "type": "method_mismatch",
      "frontendCall": {
        "file": "components/modern/EnhancedShareModal.tsx",
        "line": 97,
        "endpoint": "/api/posts/share",
        "method": "GET",
        "context": "await fetch('/api/posts/share', {"
      },
      "actualRoute": {
        "file": "routes/postsRoutes.ts",
        "path": "/api/posts/share",
        "method": "POST",
        "mountPath": "",
        "fullPath": "/api/posts/share"
      },
      "autoFixable": true,
      "recommendation": "Update frontend to use POST instead of GET"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/memory/MemoryRoleManager.tsx",
        "line": 52,
        "endpoint": "/api/memory/custom-role-request",
        "method": "GET",
        "context": "const response = await fetch('/api/memory/custom-role-request', {"
      },
      "expectedRoute": "/api/memory/custom-role-request",
      "autoFixable": false,
      "recommendation": "Create backend route: router.get('/api/memory/custom-role-request', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/memory/MemoryRoleManager.tsx",
        "line": 80,
        "endpoint": "/api/memory/switch-role",
        "method": "GET",
        "context": "const response = await fetch('/api/memory/switch-role', {"
      },
      "expectedRoute": "/api/memory/switch-role",
      "autoFixable": false,
      "recommendation": "Create backend route: router.get('/api/memory/switch-role', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/memories/EnhancedMemoriesRealtime.tsx",
        "line": 93,
        "endpoint": "/api/memories/enhance",
        "method": "GET",
        "context": "const enhanceResponse = await fetch('/api/memories/enhance', {"
      },
      "expectedRoute": "/api/memories/enhance",
      "actualRoute": {
        "file": "routes/testDataRoutes.ts",
        "path": "/api/memories/:id/comments",
        "method": "GET",
        "mountPath": "",
        "fullPath": "/api/memories/:id/comments"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/memories/:id/comments. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/media/MediaTaggingWorkflow.tsx",
        "line": 57,
        "endpoint": "/api/media/tags/popular",
        "method": "GET",
        "context": "const response = await fetch('/api/media/tags/popular');"
      },
      "expectedRoute": "/api/media/tags/popular",
      "autoFixable": false,
      "recommendation": "Create backend route: router.get('/api/media/tags/popular', ...)"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/life-ceo/PreDevelopmentChecklist.tsx",
        "line": 61,
        "endpoint": "/api/life-ceo/pre-development-checklist",
        "method": "GET",
        "context": "const response = await fetch('/api/life-ceo/pre-development-checklist', {"
      },
      "expectedRoute": "/api/life-ceo/pre-development-checklist",
      "actualRoute": {
        "file": "routes/lifeCeoLearnings.ts",
        "path": "/api/life-ceo/learnings",
        "method": "GET",
        "mountPath": "",
        "fullPath": "/api/life-ceo/learnings"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/life-ceo/learnings. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/life-ceo/PreDevelopmentChecklist.tsx",
        "line": 76,
        "endpoint": "/api/life-ceo/auto-fix",
        "method": "GET",
        "context": "await fetch('/api/life-ceo/auto-fix', {"
      },
      "expectedRoute": "/api/life-ceo/auto-fix",
      "actualRoute": {
        "file": "routes/lifeCeoLearnings.ts",
        "path": "/api/life-ceo/learnings",
        "method": "GET",
        "mountPath": "",
        "fullPath": "/api/life-ceo/learnings"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/life-ceo/learnings. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/life-ceo/Phase4ToolsDashboard.tsx",
        "line": 39,
        "endpoint": "/api/life-ceo/run-load-test",
        "method": "POST",
        "context": "return apiRequest(`/api/life-ceo/run-load-test`, {"
      },
      "expectedRoute": "/api/life-ceo/run-load-test",
      "actualRoute": {
        "file": "routes/lifeCeoLearnings.ts",
        "path": "/api/life-ceo/learnings",
        "method": "GET",
        "mountPath": "",
        "fullPath": "/api/life-ceo/learnings"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/life-ceo/learnings. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/life-ceo/LifeCEOFrameworkAgent.tsx",
        "line": 422,
        "endpoint": "/api/life-ceo/framework-agent/conversation",
        "method": "POST",
        "context": "await apiRequest('/api/life-ceo/framework-agent/conversation', 'POST', {"
      },
      "expectedRoute": "/api/life-ceo/framework-agent/conversation",
      "actualRoute": {
        "file": "routes/lifeCeoLearnings.ts",
        "path": "/api/life-ceo/learnings",
        "method": "GET",
        "mountPath": "",
        "fullPath": "/api/life-ceo/learnings"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/life-ceo/learnings. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "high",
      "type": "method_mismatch",
      "frontendCall": {
        "file": "components/life-ceo/LifeCEOContinuousLearnings.tsx",
        "line": 64,
        "endpoint": "/api/life-ceo/jira-export",
        "method": "GET",
        "context": "const response = await fetch('/api/life-ceo/jira-export', {"
      },
      "actualRoute": {
        "file": "routes/lifeCeoLearnings.ts",
        "path": "/api/life-ceo/jira-export",
        "method": "POST",
        "mountPath": "",
        "fullPath": "/api/life-ceo/jira-export"
      },
      "autoFixable": true,
      "recommendation": "Update frontend to use POST instead of GET"
    },
    {
      "severity": "high",
      "type": "method_mismatch",
      "frontendCall": {
        "file": "components/life-ceo/LifeCEOContinuousLearnings.tsx",
        "line": 98,
        "endpoint": "/api/life-ceo/capture-learnings",
        "method": "GET",
        "context": "await fetch('/api/life-ceo/capture-learnings', {"
      },
      "actualRoute": {
        "file": "routes/lifeCeoLearnings.ts",
        "path": "/api/life-ceo/capture-learnings",
        "method": "POST",
        "mountPath": "",
        "fullPath": "/api/life-ceo/capture-learnings"
      },
      "autoFixable": true,
      "recommendation": "Update frontend to use POST instead of GET"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/friendship/DanceHistoryForm.tsx",
        "line": 60,
        "endpoint": "/api/friendship/dance-history",
        "method": "GET",
        "context": "const response = await fetch('/api/friendship/dance-history', {"
      },
      "expectedRoute": "/api/friendship/dance-history",
      "actualRoute": {
        "file": "routes/friendsRoutes.ts",
        "path": "/friendship/:friendId",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/friendship/:friendId"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/friendship/:friendId. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/friendship/DanceHistoryForm.tsx",
        "line": 106,
        "endpoint": "/api/upload/dance-photos",
        "method": "GET",
        "context": "const response = await fetch('/api/upload/dance-photos', {"
      },
      "expectedRoute": "/api/upload/dance-photos",
      "actualRoute": {
        "file": "routes/uploadRoutes.ts",
        "path": "/api/upload/health",
        "method": "GET",
        "mountPath": "",
        "fullPath": "/api/upload/health"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/upload/health. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "high",
      "type": "method_mismatch",
      "frontendCall": {
        "file": "components/events/EventInvitationManager.tsx",
        "line": 19,
        "endpoint": "/api/users/me/event-invitations",
        "method": "POST",
        "context": "queryFn: () => apiRequest('/api/users/me/event-invitations'),"
      },
      "actualRoute": {
        "file": "routes/eventsRoutes.ts",
        "path": "/api/users/me/event-invitations",
        "method": "GET",
        "mountPath": "",
        "fullPath": "/api/users/me/event-invitations"
      },
      "autoFixable": true,
      "recommendation": "Update frontend to use GET instead of POST"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/feed/PostLikeComment.tsx",
        "line": 99,
        "endpoint": "/api/post/share",
        "method": "GET",
        "context": "return fetch(\"/api/post/share\", {"
      },
      "expectedRoute": "/api/post/share",
      "actualRoute": {
        "file": "routes/postsRoutes.ts",
        "path": "/api/posts/share",
        "method": "POST",
        "mountPath": "",
        "fullPath": "/api/posts/share"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/posts/share. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/admin/ValidationDashboard.tsx",
        "line": 46,
        "endpoint": "/api/validation/run",
        "method": "GET",
        "context": "const response = await fetch('/api/validation/run', {"
      },
      "expectedRoute": "/api/validation/run",
      "actualRoute": {
        "file": "routes/mrBlue.ts",
        "path": "/validation/run",
        "method": "POST",
        "mountPath": "",
        "fullPath": "/validation/run"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /validation/run. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/admin/ValidationDashboard.tsx",
        "line": 64,
        "endpoint": "/api/validation/jira-update",
        "method": "GET",
        "context": "const response = await fetch('/api/validation/jira-update', {"
      },
      "expectedRoute": "/api/validation/jira-update",
      "actualRoute": {
        "file": "routes/mrBlue.ts",
        "path": "/validation/run",
        "method": "POST",
        "mountPath": "",
        "fullPath": "/validation/run"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /validation/run. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/_archive/ModernPostCreator.tsx",
        "line": 63,
        "endpoint": "/api/users/search",
        "method": "GET",
        "context": "const response = await fetch('/api/users/search');"
      },
      "expectedRoute": "/api/users/search",
      "actualRoute": {
        "file": "routes/userRoutes.ts",
        "path": "/users/:userId",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/users/:userId"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/users/:userId. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/GuestOnboarding/GuestOnboardingFlow.tsx",
        "line": 131,
        "endpoint": "/api/guest-profile",
        "method": "POST",
        "context": "const response = await apiRequest('/api/guest-profile', {"
      },
      "expectedRoute": "/api/guest-profile",
      "actualRoute": {
        "file": "routes/profileRoutes.ts",
        "path": "/guest-profiles",
        "method": "GET",
        "mountPath": "/api",
        "fullPath": "/api/guest-profiles"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/guest-profiles. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "lib/mrBlue/subscriptions/SubscriptionManager.tsx",
        "line": 104,
        "endpoint": "/api/subscriptions/create-checkout",
        "method": "POST",
        "context": "return await apiRequest(`/api/subscriptions/create-checkout`, {"
      },
      "expectedRoute": "/api/subscriptions/create-checkout",
      "actualRoute": {
        "file": "routes/mrBlue.ts",
        "path": "/subscriptions/create-checkout",
        "method": "POST",
        "mountPath": "",
        "fullPath": "/subscriptions/create-checkout"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /subscriptions/create-checkout. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "high",
      "type": "method_mismatch",
      "frontendCall": {
        "file": "lib/mrBlue/siteBuilder/AISiteBuilderEnhanced.tsx",
        "line": 97,
        "endpoint": "/api/site-builder/generate",
        "method": "GET",
        "context": "const response = await fetch('/api/site-builder/generate', {"
      },
      "actualRoute": {
        "file": "routes/siteBuilder.ts",
        "path": "/api/site-builder/generate",
        "method": "POST",
        "mountPath": "",
        "fullPath": "/api/site-builder/generate"
      },
      "autoFixable": true,
      "recommendation": "Update frontend to use POST instead of GET"
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/profile/security/ProfileSecurityLayer.tsx",
        "line": 42,
        "endpoint": "/api/security/csp-report",
        "method": "GET",
        "context": "fetch('/api/security/csp-report', {"
      },
      "expectedRoute": "/api/security/csp-report",
      "actualRoute": {
        "file": "routes/securityRoutes.ts",
        "path": "/security/2fa/setup",
        "method": "POST",
        "mountPath": "",
        "fullPath": "/security/2fa/setup"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /security/2fa/setup. Update mount path in routes.ts or fix frontend call."
    },
    {
      "severity": "critical",
      "type": "missing_backend",
      "frontendCall": {
        "file": "components/profile/documentation/ProfileDocumentation.tsx",
        "line": 126,
        "endpoint": "/api/profile/123",
        "method": "GET",
        "context": "const response = await fetch('/api/profile/123', {"
      },
      "expectedRoute": "/api/profile/123",
      "actualRoute": {
        "file": "routes/userRoutes.ts",
        "path": "/user/profile",
        "method": "PUT",
        "mountPath": "/api",
        "fullPath": "/api/user/profile"
      },
      "autoFixable": true,
      "recommendation": "Route exists at /api/user/profile. Update mount path in routes.ts or fix frontend call."
    }
  ],
  "healthScore": 66
}