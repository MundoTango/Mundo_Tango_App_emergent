name: Scheduled Audits
on:
  schedule:
    # Daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Manual trigger

jobs:
  daily-full-audit:
    name: Daily Full Platform Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run complete audit suite
        run: |
          echo "Running full platform audit..."
          npm run audit:all || true
          npm run lighthouse:audit || true
          npm run bundle:capture daily-$(date +%Y%m%d) || true
          npm run security:scan || true
          npm run deps:map || true
          npm run optimize || true
          npm run perf:dashboard || true
      
      - name: Upload all audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: daily-audit-$(date +%Y%m%d)
          path: |
            docs/audit-reports/
            docs/lighthouse-reports/
            docs/bundle-tracking/
            docs/security-reports/
            docs/dependency-reports/
            docs/optimization-reports/
            docs/performance-dashboard/
          retention-days: 90
      
      - name: Create issue on critical failures
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const title = `ðŸš¨ Daily Audit Failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `## Critical Audit Failure
            
            The scheduled daily audit has detected critical issues that require immediate attention.
            
            **Date:** ${new Date().toISOString()}
            **Workflow:** ${context.workflow}
            **Run:** ${context.runId}
            
            ### Next Steps
            1. Review the workflow logs
            2. Check the uploaded artifacts
            3. Run \`npm run perf:dashboard\` locally
            4. Address critical issues
            
            ### Quick Commands
            \`\`\`bash
            npm run perf:dashboard    # Check overall health
            npm run optimize          # Get recommendations
            npm run audit:all         # Full page audit
            \`\`\`
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['audit', 'critical', 'automated']
            });

  weekly-dependency-review:
    name: Weekly Dependency Review
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 * * 0' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run comprehensive dependency analysis
        run: |
          npm run deps:map
          npm run deps:unused
          npm run security:scan
          npm run bundle:analyze
      
      - name: Generate weekly report
        run: npm run optimize
      
      - name: Create weekly summary issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const optimizationFiles = fs.readdirSync('docs/optimization-reports/');
            
            if (optimizationFiles.length > 0) {
              const latest = optimizationFiles.sort().reverse()[0];
              const report = JSON.parse(fs.readFileSync(`docs/optimization-reports/${latest}`, 'utf8'));
              
              let body = `## ðŸ“Š Weekly Dependency & Optimization Report\n\n`;
              body += `**Date:** ${new Date().toISOString().split('T')[0]}\n\n`;
              body += `### Summary\n`;
              body += `- Total Packages: ${report.summary?.totalPackages || 'N/A'}\n`;
              body += `- Security Issues: ${report.summary?.securityIssues || 'N/A'}\n`;
              body += `- Optimization Opportunities: ${report.recommendations?.length || 0}\n\n`;
              
              if (report.recommendations && report.recommendations.length > 0) {
                body += `### Top Recommendations\n`;
                report.recommendations.slice(0, 5).forEach((rec, i) => {
                  const icon = rec.priority === 'high' ? 'ðŸ”´' : rec.priority === 'medium' ? 'ðŸŸ¡' : 'ðŸŸ¢';
                  body += `${i + 1}. ${icon} **${rec.title}**\n`;
                  body += `   - ${rec.description}\n`;
                });
              }
              
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `ðŸ“Š Weekly Dependency Review - ${new Date().toISOString().split('T')[0]}`,
                body: body,
                labels: ['weekly-report', 'dependencies', 'automated']
              });
            }
