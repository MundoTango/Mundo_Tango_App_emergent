name: ESA LIFE CEO 61Ã—21 Testing Framework

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run every 30 minutes for continuous validation
    - cron: '*/30 * * * *'
  workflow_dispatch:

env:
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
  NODE_ENV: test
  TEST_API_URL: http://localhost:5000

jobs:
  api-contract-tests:
    name: API Contract Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: mundotango_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup test database
        run: |
          npm run db:push --force
          npm run db:seed:test
      
      - name: Start application server
        run: |
          npm run dev &
          sleep 10
      
      - name: Run authentication contract tests
        run: npm test -- tests/api/contract/auth.contract.test.ts
        timeout-minutes: 5
      
      - name: Run posts contract tests
        run: npm test -- tests/api/contract/posts.contract.test.ts
        timeout-minutes: 5
      
      - name: Run events contract tests
        run: npm test -- tests/api/contract/events.contract.test.ts
        timeout-minutes: 5
      
      - name: Run agents contract tests
        run: npm test -- tests/api/contract/agents.contract.test.ts
        timeout-minutes: 10
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: api-contract-test-results
          path: |
            test-results/
            coverage/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: mundotango_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup test database
        run: |
          npm run db:push --force
          npm run db:seed:test
      
      - name: Start application server
        run: |
          npm run dev &
          sleep 10
      
      - name: Run Life CEO agents integration tests
        run: npm test -- tests/integration/lifeceo-agents.integration.test.ts
        timeout-minutes: 15
      
      - name: Run workflow integration tests
        run: npm test -- tests/integration/workflows.integration.test.ts
        timeout-minutes: 15
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: |
            test-results/
            coverage/

  e2e-tests:
    name: E2E Tests - ${{ matrix.browser }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        include:
          - browser: chromium
            project: 'Desktop Chrome'
          - browser: firefox
            project: 'Desktop Firefox'
          - browser: webkit
            project: 'Desktop Safari'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: mundotango_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}
      
      - name: Setup test database
        run: |
          npm run db:push --force
          npm run db:seed:test
      
      - name: Build application
        run: npm run build
      
      - name: Start application server
        run: |
          npm run start &
          sleep 10
      
      - name: Run E2E tests
        run: npx playwright test --project="${{ matrix.project }}"
        timeout-minutes: 20
      
      - name: Run viewport & performance tests
        run: npx playwright test tests/e2e/viewport-performance.e2e.test.ts --project="${{ matrix.project }}"
        timeout-minutes: 15
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results-${{ matrix.browser }}
          path: |
            playwright-report/
            test-results/
            tests/screenshots/

  mobile-tests:
    name: Mobile E2E Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: mundotango_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
      
      - name: Setup test database
        run: |
          npm run db:push --force
          npm run db:seed:test
      
      - name: Build application
        run: npm run build
      
      - name: Start application server
        run: |
          npm run start &
          sleep 10
      
      - name: Run mobile tests - iPhone
        run: npx playwright test --project="iPhone 14 Pro"
        timeout-minutes: 15
      
      - name: Run mobile tests - Android
        run: npx playwright test --project="Pixel 7"
        timeout-minutes: 15
      
      - name: Run tablet tests - iPad
        run: npx playwright test --project="iPad Pro"
        timeout-minutes: 15
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: mobile-test-results
          path: |
            playwright-report/
            test-results/

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          npm install -g artillery@latest
      
      - name: Start application server
        run: |
          npm run dev &
          sleep 15
      
      - name: Run load tests
        run: |
          artillery run tests/performance/load-test.yml
          artillery run tests/performance/stress-test.yml
        timeout-minutes: 10
      
      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun --upload.target=temporary-public-storage
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
      
      - name: Upload performance results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: performance-test-results
          path: |
            artillery-reports/
            .lighthouseci/

  continuous-validation:
    name: Continuous Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: mundotango_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup test database
        run: |
          npm run db:push --force
          npm run db:seed:test
      
      - name: Start application server
        run: |
          npm run dev &
          sleep 10
      
      - name: Run validation suite
        run: |
          # Run critical tests only for continuous validation
          npm test -- tests/api/contract/auth.contract.test.ts --testNamePattern="critical"
          npm test -- tests/integration/lifeceo-agents.integration.test.ts --testNamePattern="critical"
        timeout-minutes: 5
      
      - name: Check system health
        run: |
          curl -f http://localhost:5000/health || exit 1
          curl -f http://localhost:5000/api/agents || exit 1
      
      - name: Send validation report
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Continuous Validation Failed - ${new Date().toISOString()}`,
              body: 'The continuous validation check has failed. Please investigate immediately.',
              labels: ['critical', 'validation-failure']
            })

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [api-contract-tests, integration-tests, e2e-tests, mobile-tests, performance-tests]
    if: always()
    
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v3
      
      - name: Generate test report
        run: |
          echo "# Test Summary Report" > test-summary.md
          echo "## API Contract Tests: ${{ needs.api-contract-tests.result }}" >> test-summary.md
          echo "## Integration Tests: ${{ needs.integration-tests.result }}" >> test-summary.md
          echo "## E2E Tests: ${{ needs.e2e-tests.result }}" >> test-summary.md
          echo "## Mobile Tests: ${{ needs.mobile-tests.result }}" >> test-summary.md
          echo "## Performance Tests: ${{ needs.performance-tests.result }}" >> test-summary.md
          echo "" >> test-summary.md
          echo "Generated at: $(date)" >> test-summary.md
      
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('test-summary.md', 'utf8');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: summary
            });
      
      - name: Upload final report
        uses: actions/upload-artifact@v3
        with:
          name: test-summary-report
          path: test-summary.md