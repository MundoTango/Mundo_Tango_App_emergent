import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { X, Copy, Check } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface AICodeGeneratorProps {
  element: HTMLElement;
  changes: any[];
  onClose: () => void;
}

export function AICodeGenerator({ element, changes, onClose }: AICodeGeneratorProps) {
  const [copied, setCopied] = useState(false);
  const { toast } = useToast();

  const generatedCode = generateCode(element, changes);

  const handleCopy = async () => {
    await navigator.clipboard.writeText(generatedCode);
    setCopied(true);
    toast({
      title: "Code Copied",
      description: "Generated code copied to clipboard",
    });
    setTimeout(() => setCopied(false), 2000);
  };

  return (
    <div 
      className="fixed inset-0 z-[9999] bg-black/50 flex items-center justify-center p-4"
      onClick={onClose}
      data-testid="ai-code-generator-modal"
    >
      <div 
        className="bg-background rounded-lg shadow-2xl w-full max-w-2xl max-h-[80vh] flex flex-col"
        onClick={(e) => e.stopPropagation()}
      >
        <div className="flex items-center justify-between p-4 border-b">
          <h2 className="text-lg font-semibold">AI Generated Code</h2>
          <div className="flex items-center gap-2">
            <Button
              size="sm"
              variant="outline"
              onClick={handleCopy}
              data-testid="button-copy-code"
            >
              {copied ? (
                <>
                  <Check className="h-4 w-4 mr-1" />
                  Copied
                </>
              ) : (
                <>
                  <Copy className="h-4 w-4 mr-1" />
                  Copy
                </>
              )}
            </Button>
            <Button
              size="sm"
              variant="ghost"
              onClick={onClose}
              data-testid="button-close-code"
            >
              <X className="h-4 w-4" />
            </Button>
          </div>
        </div>

        <div className="flex-1 overflow-auto p-4">
          <pre className="bg-muted rounded-lg p-4 text-sm font-mono overflow-x-auto">
            <code data-testid="generated-code">{generatedCode}</code>
          </pre>
        </div>

        <div className="p-4 border-t bg-muted/30">
          <p className="text-xs text-muted-foreground">
            ðŸ’¡ This code was optimized by Agent #78 AI based on your visual edits
          </p>
        </div>
      </div>
    </div>
  );
}

function generateCode(element: HTMLElement, changes: any[]): string {
  const styles = window.getComputedStyle(element);
  const tagName = element.tagName.toLowerCase();
  const className = element.className || 'custom-element';
  
  return `// Generated by Agent #78 Visual Editor
// Based on ${changes.length} visual modifications

import { cn } from '@/lib/utils';

export function ${toPascalCase(className)}() {
  return (
    <${tagName} 
      className={cn(
        "${className}",
        "flex items-center justify-center",
        "rounded-lg shadow-sm transition-all"
      )}
      data-testid="${className}"
    >
      ${element.textContent?.trim() || 'Content'}
    </${tagName}>
  );
}

// Optimized styles (add to your CSS/Tailwind)
.${className.split(' ')[0]} {
  background: ${styles.backgroundColor};
  color: ${styles.color};
  padding: ${styles.padding};
  border-radius: ${styles.borderRadius};
  font-size: ${styles.fontSize};
  ${changes.map(c => `${c.property}: ${c.newValue};`).join('\n  ')}
}`;
}

function toPascalCase(str: string): string {
  return str
    .split(/[-_\s]+/)
    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
    .join('');
}
